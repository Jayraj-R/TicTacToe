{"version":3,"sources":["Components/TicTacToe.jsx","App.js","reportWebVitals.js","index.js"],"names":["useStyles","makeStyles","cell","height","width","paddingTop","container","margin","marginBottom","TicTacToe","classes","emptyArray","useState","array","setArray","undefined","fighter","setFighter","cpu","setCpu","force","setForce","counter","setCounter","winner","setWinner","fighterHandler","chosenOne","otherOne","theForce","className","map","row","rindex","Grid","direction","justify","alignItems","cindex","items","ButtonGroup","color","aria-label","Button","onClick","i","j","array_copy","p","x","Math","round","random","y","cellHandler","Typography","style","fontFamily","variant","gutterBottom","endIcon","xs","href","target","theme","paper","padding","paddingBottom","App","item","sm","Paper","elevation","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.771fbc3b.chunk.js","sourcesContent":["import React, {useState} from 'react'\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport {\r\n  Grid, \r\n  Typography,\r\n  Button,\r\n  ButtonGroup } from '@material-ui/core';\r\nimport RefreshRoundedIcon from '@material-ui/icons/RefreshRounded';\r\nconst useStyles = makeStyles(() => ({\r\n  cell:{\r\n    height:35,\r\n    width:35,\r\n    paddingTop:15\r\n  },\r\n  container:{\r\n    margin: \"0px\",\r\n    marginBottom: \"4em\"\r\n  }\r\n}));\r\n\r\n\r\nconst TicTacToe = () => {\r\n\r\n    const classes = useStyles();\r\n            {/* Constants/Variable Declaration */}\r\n    const emptyArray = [\r\n      [\" \", \" \", \" \"],\r\n      [\" \", \" \", \" \"],\r\n      [\" \", \" \", \" \"]\r\n    ]\r\n    const [array,setArray] = useState(emptyArray)\r\n      const [fighter,setFighter] = useState(undefined)        \r\n      const [cpu, setCpu] = useState(undefined)\r\n      const [force , setForce] = useState(undefined)\r\n      const [counter, setCounter] = useState(0)\r\n      const [winner, setWinner] = useState(undefined)\r\n      const restart = ()=>{\r\n        setArray(emptyArray)\r\n        setCounter(0) \r\n        setForce(undefined) \r\n      }\r\n\r\n        {/* User's Charachter */}\r\n      const fighterHandler = (chosenOne,otherOne) => {\r\n        setFighter(chosenOne)\r\n        setCpu(otherOne)\r\n\r\n      }\r\n\r\n      \r\n        {/* Game Mechanic for checking who wins. (You?) */}\r\n\r\n      const theForce = () =>{\r\n        if(array[0][0]===array[0][1] && array[0][1]===array[0][2]  && array[0][0]!==\" \" && array[0][1]!==\" \" && array[0][2]!==\" \"){\r\n          if(array[0][0]===fighter) setWinner(\"You win!\")\r\n          else setWinner(\"You Lose!\")\r\n          setForce('awakens')\r\n        }\r\n        else if(array[1][0]===array[1][1] && array[1][1]===array[1][2]  && array[1][0]!==\" \" && array[1][1]!==\" \" && array[1][2]!==\" \"){\r\n          if(array[1][0]===fighter) setWinner(\"You win!\")\r\n          else setWinner(\"You Lose!\")\r\n          setForce('awakens')\r\n        }\r\n        else if(array[2][0]===array[2][1] && array[2][1]===array[2][2]  && array[2][0]!==\" \" && array[2][1]!==\" \" && array[2][2]!==\" \"){\r\n          if(array[2][0]===fighter) setWinner(\"You win!\")\r\n          else setWinner(\"You Lose!\")\r\n          setForce('awakens')\r\n        }\r\n        else if(array[0][0]===array[1][0] && array[1][0]===array[2][0]  && array[0][0]!==\" \" && array[1][0]!==\" \" && array[2][0]!==\" \"){\r\n          if(array[0][0]===fighter) setWinner(\"You win!\")\r\n          else setWinner(\"You Lose!\")\r\n          setForce('awakens')\r\n        }\r\n        else if(array[0][1]===array[1][1] && array[1][1]===array[2][1]  && array[0][1]!==\" \" && array[1][1]!==\" \" && array[2][1]!==\" \"){\r\n          if(array[0][1]===fighter) setWinner(\"You win!\")\r\n          else setWinner(\"You Lose!\")\r\n          setForce('awakens')\r\n        }\r\n        else if(array[0][2]===array[1][2] && array[1][2]===array[2][2]  && array[0][2]!==\" \" && array[1][2]!==\" \" && array[2][2]!==\" \"){\r\n          if(array[0][2]===fighter) setWinner(\"You win!\")\r\n          else setWinner(\"You Lose!\")\r\n          setForce('awakens')\r\n        }\r\n        else if(array[0][0]===array[1][1] && array[1][1]===array[2][2]  && array[0][0]!==\" \" && array[1][1]!==\" \" && array[2][2]!==\" \"){\r\n          if(array[0][0]===fighter) setWinner(\"You win!\")\r\n          else setWinner(\"You Lose!\")\r\n          setForce('awakens')\r\n        }\r\n        else if(array[0][2]===array[1][1] && array[1][1]===array[2][0]  && array[0][2]!==\" \" && array[1][1]!==\" \" && array[2][0]!==\" \"){\r\n          if(array[0][2]===fighter) setWinner(\"You win!\")\r\n          else setWinner(\"You Lose!\")\r\n          setForce('awakens')\r\n        }\r\n        else if(counter>7 && counter%8==0){\r\n          setWinner(\"It's a tie!\")\r\n          setForce('awakens')\r\n        }\r\n      }\r\n      \r\n        {/* Filling up the array - User and CPU(random) */}\r\n      const cellHandler = (i,j) => {\r\n\r\n        let array_copy = [...array]\r\n\r\n        if(array_copy[i][j]===' '){\r\n          array_copy[i][j]=fighter\r\n          setCounter(counter+2)\r\n          theForce()\r\n\r\n          for(let p=0;p<20;p++){\r\n            const x = Math.round(Math.random()*2)\r\n            const y = Math.round(Math.random()*2)\r\n            \r\n            if(array_copy[x][y]===\" \"){\r\n              array_copy[x][y]=cpu\r\n              theForce()\r\n              break;\r\n            }\r\n          }\r\n  \r\n          setArray(array_copy)\r\n  \r\n        }\r\n      }\r\n      return (\r\n        <>\r\n          \r\n          <div className={classes.container}>\r\n\r\n\r\n          {!(fighter) ? \r\n                (\r\n                  /* Game-Display */\r\n                  <ButtonGroup color=\"primary\" aria-label=\"outlined primary button group\">\r\n                    <Button onClick={()=>fighterHandler('X','O')}>X</Button>\r\n                    <Button onClick={()=>fighterHandler('O','X')}>O</Button>\r\n                  </ButtonGroup>\r\n                ) :\r\n                (<>       {/* Game-Display */}\r\n\r\n                    {array.map((row, rindex) => {\r\n                    return (\r\n                      <Grid container\r\n                      direction=\"row\"\r\n                      justify=\"center\"\r\n                      alignItems=\"center\">\r\n                        {row.map((cell, cindex) => {\r\n                          return (\r\n                                <Grid items> \r\n                                  <ButtonGroup color=\"primary\" aria-label=\"outlined primary button group\">\r\n                                    <Button alignItems=\"center\" onClick={()=>cellHandler(rindex,cindex)} className=\"cell\"><span className={classes.cell}>{cell}</span></Button>\r\n                                  </ButtonGroup>\r\n                                  </Grid>\r\n                            );\r\n                        })}\r\n                      </Grid>\r\n                    );\r\n                  })}\r\n\r\n                  {(force) && (<>\r\n                                  <Typography style={{fontFamily:'Inconsolata'}} variant=\"h4\">\r\n                                    Game Over\r\n                                  </Typography>\r\n                                  <Typography variant=\"h6\" style={{fontFamily:'Inconsolata'}} gutterBottom>\r\n                                  {winner}\r\n                                  </Typography>\r\n                                  <Button  endIcon={<RefreshRoundedIcon/>} color=\"primary\" aria-label=\"outlined primary\" onClick={restart}>Refresh</Button>\r\n                              </>)}\r\n                </>)\r\n          }\r\n\r\n         \r\n        </div>\r\n        <Grid xs={12}>\r\n          <Typography variant=\"subtitle1\">\r\n            View <a href=\"https://github.com/Jayraj-R/TicTacToe\" target=\"_blank\">source code</a>.      \r\n          </Typography>\r\n        </Grid>\r\n        </>\r\n      );\r\n}\r\n\r\nexport default TicTacToe\r\n            ","import './App.css';\nimport { makeStyles } from '@material-ui/core/styles';\nimport {Grid,Typography, Paper} from '@material-ui/core';\nimport TicTacToe from './Components/TicTacToe'\n\nconst useStyles = makeStyles((theme) => ({\n  paper: {\n    padding:50,\n    paddingBottom:0\n  },\n}));\n\n\nfunction App() {\n  const classes = useStyles();\n  return (\n    <div className=\"App\">\n      <Grid container justify=\"center\" alignItems=\"center\" xs={12}>\n\n        <Grid item xs={false} sm={3}></Grid>\n\n        <Grid item justify=\"center\" alignItems=\"center\" xs={11} sm={6}>\n\n          <Paper className={classes.paper} elevation={3}>\n            <Typography className=\"font-inconsalata\" variant=\"h2\" gutterBottom>\n              <strong style={{fontFamily:'Inconsolata'}}>Tic Tac Toe</strong>\n            </Typography>\n            \n            <Grid container direction=\"row\" justify=\"center\" alignItems=\"center\">\n              \n              <Grid item xs={false} sm={3}></Grid>\n              \n              <Grid justify=\"center\" container alignItems=\"center\" item xs={12} sm={6}>\n                  <TicTacToe/>\n              </Grid>\n             \n              <Grid item xs={false} sm={3}></Grid>\n            \n            </Grid>\n\n          </Paper>\n\n        </Grid>\n\n        <Grid item xs={false} sm={3}></Grid>\n      </Grid>\n        \n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}